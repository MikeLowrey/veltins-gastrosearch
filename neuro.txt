        /*
        $n = new PlacesItem();
        $n->place_id = "123";
        $n->name = "Hotelbar";
        $n->types = implode(",",["bar"]);
        $n->location = ["lat"=> 123, "lng"=> 8.12];
        $n->place = "Berlin";
        $n->zip = "59939";
        $n->street = "Am Markt";
        $n->street_number = "15";
        $n->country = "Germany";
        $n->phone = "020202";
        $n->website = "http://www";
        $n->formatted_address = "bala ";
        $n->user_ratings_total = 285;
        $n->save();
        echo $n->id;
        dd(PlacesItem::find($n->id));
        // store_full_dataset
        */

        $arr = [
            'result' => [
                "address_components" => [
                     [
                        "long_name" => "15",
                        "short_name" => "15",
                        "types" => ["street_number"]
                     ],
                     [
                        "long_name" => "Arnsberg",
                        "short_name" => "Arnsberg",
                        "types" => ["admin"]
                     ],                         
                     [
                        "long_name" => "59939",
                        "short_name" => "59939",
                        "types" => ["postal_code"]
                     ],                                                               
                ]
            ]
        ];
        #dd( $this->filter_value_from_google_address_components_by_name($arr, "postal_code") );

        
        $arr1 = [
            0 => ["name"=>"x", "lat"=>123],
            1 => ["name"=>"x", "lat"=>123],
            2 => ["name"=>"x", "lat"=>123],
        ];
        $arr2 = [
            0 => ["name"=>"y", "lat"=>123],
            1 => ["name"=>"y", "lat"=>123],
            2 => ["name"=>"y", "lat"=>123],
        ];        
        $arr3 = [
            0 => ["name"=>"z", "lat"=>123],
            1 => ["name"=>"z", "lat"=>123],
            2 => ["name"=>"z", "lat"=>123],
        ];
        $arr = [
            $arr1, $arr2, $arr3
        ];
        $_r = [];
        for($i=0; $i<count($arr);$i++){
            //print_r($arr[$i]);
            $_r = array_merge($_r,$arr[$i]);
        }






        /*        
        $this->result_set = collect([0 => ["a","b"], 1 => ["c","d"]]);
        $this->result_set = $this->result_set->merge([0=>["e","f"]]);
        dd($this->result_set->all());

        echo '<pre>';
        print_r($_r);
        echo '</pre>';
        dd(array_merge($arr[0],$arr[1],$arr[2]));
        /*
        $i =1;
        do {
            $this->result_set->push([
                "html_attributions" => "bla",
                "results" => [
                    0 => [
                        "business_status" => "oper",
                        "geometry" => [
                            "location" => ["lat" => 123, "lng"=> 40]
                            ]
                    ]
                ]
            ]);
            $i++;
        } while ($i <= 10);
        dd($this->result_set);
        */
        /*
        $i = 1;
        $c = collect();
        // remove all with value 2
        $c = $c->reject(function ($name) {
            return $name == 2;
        });
        // push array
        $c->push([5,22]);
        
        // cast to array
        // dd($c->all());
        #dd($c);
        #dd($c.push([22]));
        do
        {
            $c->push($i);
            echo $i;         // es wird $i ausgegeben
            echo "<br>"; 
            $i++ ;            // Wert wird um 1 erhöht
        } while ($i <= 10);
        dd($c);
        return;
        */

        #$_db = $this->search_by_place($request);        


    public function xxx_get_places_data_from_google_api($request) {  
        
        $pagetoken = $type = "";
        if ( null !== $request['type'] ) {
            $type = $request['type'];
        } else {
            $type = "restaurant";
        }   

        $geoDataCollection = collect();
        $pagetoken = null;
        $i = 1;
        do
        {
            echo '<p>'.$i." hat pagetoken: ". $pagetoken;
            $response = Http::get('https://maps.googleapis.com/maps/api/place/nearbysearch/json', 
                [
                    'location'=> $request['lat'].",".$request['lng'],
                    'radius' => 1500,
                    'type' => $type,
                    'key'=> $this->google_api_key,
                    #'pagetoken' => $pagetoken
                ]
            );            
            $geoDataCollection->push($response->json()["results"]); 
            if(isset ($response->json()["next_page_token"])) {
                $pagetoken = $response->json()["next_page_token"];
            }
            #sleep(2);
            $i++;
            echo $i;
            if($i == 1) {
                print_r($geoDataCollection);
                dd("out off error");
            }
        } while ( !isset ($response->json()["next_page_token"]) );
        
        dd($geoDataCollection);

        return;

        $google_places_api_url = 'https://maps.googleapis.com/maps/api/place/nearbysearch/json?location=%s,%s&radius=1500&type=%s&key=%s%s';
        $url = sprintf($google_places_api_url,
                $request['lat'],
                $request['lng'],
                $type,
                $this->google_api_key,
                $pagetoken
            );        
        


        $ch = curl_init(); // cURL ínitialisieren
        curl_setopt($ch, CURLOPT_URL, $url);
        curl_setopt($ch, CURLOPT_HEADER, 0);  
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);  
        $result = curl_exec($ch); // Ausführen
        curl_close($ch); // Objekt schließen und Ressourcen freigeben
        
        $result = json_decode($result,1);
        $response = $result;
        $response["calledUri"] = $url;
        header('Content-Type: application/json');
        header('Content-type: application/json; charset=utf-8');
        echo json_encode($response);        
    }


    public function xxx__index(Request $request) {  
             
        $pagetoken = $type = "";
        
        if (null !== $request->input('pagetoken')) {
            $pagetoken = "&pagetoken=".$request->input('pagetoken');
        }
        if ( null !== $request->input('type') ) {
            $type = $request->input('type');
        } else {
            $type = "restaurant";
        }        
        
        $url = sprintf('https://maps.googleapis.com/maps/api/place/nearbysearch/json?location=%s,%s&radius=1500&type=%s&key=%s%s',
                $request->input('lat'),
                $request->input('lng'),
                $type,
                $this->google_api_key,
                $pagetoken
                );
        
        
        $ch = curl_init(); // cURL ínitialisieren
        curl_setopt($ch, CURLOPT_URL, $url);
        curl_setopt($ch, CURLOPT_HEADER, 0);  
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);  
        $result = curl_exec($ch); // Ausführen
        curl_close($ch); // Objekt schließen und Ressourcen freigeben
        
        $result = json_decode($result,1);
        $response = $result;
        $response["calledUri"] = $url;
        header('Content-Type: application/json');
        header('Content-type: application/json; charset=utf-8');
        echo json_encode($response);        
    }


    
        


        echo "--";
        dd($_places_items);

        /*
        // $this->get_geodata_by_name();

        return UserLocationRequest::where(              
            ['request' => $request->input("address")]            
        )->get();        

        return $this->search_by_place($request);
        return PlacesItem::all();
        */            


                  
            /*
            array_walk($_places_items, function($item) use ($new_userLocations_id) {
                // better will be to insert to places_item and catch the id . 
                // if item allready exists get the id and delete item from $_plaxes_item
                $_placeItem = PlacesItem::where(["place_id"=>$item['place_id']])->first();
                if($_placeItem) {

                }
                DB::table('rel_search_to_places')->insert([
                    'user_request_id' => $new_userLocations_id, 
                    'places_id' => $item['place_id']
                    ]);
            });*/
            #return $_places_items;
            // make a google place nearby call with lat and lng , type and raidius            

            //insert to relation table $userLocations->id and $placesItem->id


            // call google api details and merge both 
            /*
            $_id = isset($userLocations->id) ? $userLocations->id : $new_userLocations_id;                
            return [
                "status"=> "OK", 
                "results" => $this->get_place_items_by_request_id($_id)
            ];


            if (count($_places_items) === 0)
            {
                $_id = isset($userLocations->id) ? $userLocations->id : $new_userLocations_id;                
                return [
                    "status"=> "OK", 
                    "results" => $this->get_place_items_by_request_id($_id)
                ];
            }

            $_places_items_with_detials = $this->get_google_places_detials_by_place_id( $_places_items );           
            // store results in databse
            array_walk($_places_items_with_detials, function($item) {
                $this->store_full_dataset( $item );
            });          
            */            

    public function xxx_search_by_place($request) 
    {          
        $_search_string = trim(strtolower($request->input("address")));

        $res = PlacesItem::where(
            [    
                ['place', '=', $_search_string],
                ['types', 'like', '%'.$request->input("type").'%']
                //['place' => $_search_string],                
            ]            
            )
            ->get();
            return $res;
    }

    /**
     * Undocumented function
     *
     * @return void
     */
    public function test(Request $request) 
    {
        // is address allread in database?        
        $_db = $this->search_places_data_in_database($request);
        
        if (count($_db) > 0) 
        {
            return $_db;
        }
        #dd("not in db");
        // get from google maps api the location coordinates
        $_gmap_geodata_api = null;
        $_gmap_geodata_api = $this->get_geodata_from_google_geocode_api_by_name($request);
        if (!$_gmap_geodata_api) {
            return ["not found"];
        }                
        // start to call google places api by lat lng type        
        $places_parameters = [    
            'type' => $request->input("type"),
            'lat' => $_gmap_geodata_api["geometry"]["location"]["lat"], // 51.3982179, // ms
            'lng' => $_gmap_geodata_api["geometry"]["location"]["lng"] // 8.5749432, // ms 
        ];        
        $_places_items = $this->get_places_data_from_google_api($places_parameters);
        return $_places_items;
        // start to call google place details api
        if (!count($_places_items) > 0)
        {
            return ;
        }
        $_places_items_with_detials = $this->get_google_places_detials_by_place_id( $_places_items );
        #dd($_places_items_with_detials);
        // store results in databse
        array_walk($_places_items_with_detials, function($item) {
            $this->store_full_dataset( $item );
        });

        // response
        return $this->search_places_data_in_database($request);
    }

    public function __construct() 
    {
        $this->google_api_key = "AIzaSyDlG7DSQ99FNnOb8Z2tH9JpnYfVxsx4jFA"; // @todo put it to .env 
        $this->result_set = collect();
        //$this->__olsberg = json_decode(file_get_contents(storage_path("app/public/Olsberg.json")));
    }           

    /**
     * Search for Dataset in Database by place id and type
     *
     * @param Request $request
     * @return array
     */
    public function search_places_data_in_database(Request $request) 
    {          
        $_search_string = trim(strtolower($request->input("address")));
        return PlacesItem::where([    
                ['place', '=', $_search_string], //['place' => $_search_string],
                ['types', 'like', '%'.$request->input("type").'%']
                             
            ])->get();
    }


    public function get_geodata_by_name_from_db(Request $request) 
    {        
        return PlacesItem::all();
    }             



    welcome.blade.html
    ******************
           <div>
            <select id="type-1">
                <option value="amusement_park">amusement_park</option>
                <option value="bar">bar</option>
                <option value="bowling_alley">bowling_alley</option>
                <option value="cafe">cafe</option>
                <option value="campground">campground</option>		  
                <option value="lodging">lodging</option>
                <option value="meal_delivery">meal_delivery</option>
                <option value="meal_takeaway">meal_takeaway</option>
                <option value="movie_theatre">movie_theatre</option>
                <option value="night_club">night_club</option>
                <option value="restaurant">restaurant</option>
            </select>
        </div>
        <div>
            <input type="range" min="1000" max="20000" value="2000" class="sliderx" id="range">
            <span id="range-value"></span> Meter
        </div>
        <input value="" placeholder="PLZ, Stadt eingeben" id="adress-input-field"/>
        <div>
            <button id="get-geodata-from-adress" onclick="init()">los!</button>        
        </div>
        <div>
            <button id="new-crawl-geodata-from-adress" class="hide-this-element" onclick="newCrawl()">Neu crawlen!</button>        
        </div>


    /**
    * @return \Illuminate\Support\Collection
    */
    /*
    public function query()
    {
        
        #return PlacesItem::all(); // PlacesItem::select("place_id", "id")->where("id",">","2");
    }

    /**
    * @return \Illuminate\Support\Collection
    */
    /*
    public function collection()
    {
        return DB::table('rel_search_to_places')        
            ->join('places_items', 'places_items.place_id', '=', 'rel_search_to_places.places_id')
            ->where(["rel_search_to_places.user_request_id" => 19 ])
            ->select('places_items.id')
            ->get();
        return PlacesItem::select('id')->where('id','>',10)->get();
        //return PlacesItem::all();
    }
    */



    /*
                var row = '';                
                //let node = document.createElement("TR");
                row += '<tr>';
                row += "<td>" + value.name + "</td>";
                row += "<td>" + value.name + "</td>";
                row += "<td>" + value.place_id + "</td>";                
                row += '</tr>';
                console.log("row",row)
                document.getElementById("myTable").appendChild(row);                 
                //node.appendChild(row);
                // document.getElementById("myTable").appendChild(node);                 
                */        


        async function XcallApi(url) {
            try {
                let response = await fetch(url);
                console.log("url step 2", url);
                _json2 = await response.json();                
                console.log("response", _json2);
                // document.getElementById("output").innerHTML = _json2;
                // BuildList(_json2)
                BuildTable(_json2)
                document.getElementById("hits").innerHTML = _json2.results.length + " - " + type.value;
                if(typeof _json2.referenz !== "undefined") {
                    document.getElementById("download-csv").style.display = "inline";
                    document.getElementById("download-csv").href = "/download/" + _json2.referenz;
                } else if(_json2.results.length > 0) {
                    document.getElementById("download-csv").style.display = "inline";                    
                    document.getElementById("download-csv").href = "/download/generate/" + zip.value + "/" + type.value;  
                    console.log("zip",zip);
                } else {
                    console.log("no items found")
                }
            } catch (err) {
                // catches errors both in fetch and response.json
                alert("step2");
                console.log("err step 2", err);
            }                        
        }
        




            //console.log(callApi(url));
            return false;
            fetch(url)
                .then(function(data) {
                    
                    _json2 = data.json();
                    console.log("data",_json2);
                    document.getElementById("output").innerHTML = _json2;                    
                    })                
                    .catch(function(error) {
                        // If there is any error you will catch them here
                        console.error("hilfre")
                    });     

                    /*
            try {
                let response =  fetch(url);
                console.log("url step 2", url);

            } catch (err) {
                // catches errors both in fetch and response.json
                alert("step2");
                console.log("err step 2", err);
            }   
            */


body {
    background-color: #096C30;
    color: white;
}

.slidecontainer {
    width: 100%;
}

.slider {
    -webkit-appearance: none;
    width: 100%;
    height: 25px;
    background: #d3d3d3;
    outline: none;
    opacity: 0.7;
    -webkit-transition: .2s;
    transition: opacity .2s;
}

.slider:hover {
    opacity: 1;
}

.slider::-webkit-slider-thumb {
    -webkit-appearance: none;
    appearance: none;
    width: 25px;
    height: 25px;
    background: #4CAF50;
    cursor: pointer;
}

.slider::-moz-range-thumb {
    width: 25px;
    height: 25px;
    background: #4CAF50;
    cursor: pointer;
}            